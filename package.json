{
  "name": "happyx",
  "displayName": "HappyX",
  "description": "HappyX web framework for Visual Studio Code",
  "version": "5.0.2",
  "publisher": "HapticX",
  "license": "MIT",
  "icon": "logo.png",
  "pricing": "Free",
  "repository": "https://github.com/HapticX/hpx-vs-code",
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "keywords": [
    "nim",
    "happyx",
    "nimja",
    "nimble"
  ],
  "engines": {
    "vscode": "^1.81.2"
  },
  "activationEvents": [
    "onLanguage:nim",
    "onLanguage:nimcfg",
    "onLanguage:nimble",
    "onCommand:nim.build",
    "onCommand:nim.run",
    "onCommand:nim.runTest",
    "onCommand:nim.execSelectionInTerminal"
  ],
  "scripts": {
      "vscode:prepublish": "nimble release"
  },
  "galleryBanner": {
    "color": "#EF7575",
    "theme": "dark"
  },
  "homepage": "https://github.com/HapticX/hpx-vs-code/blob/master/README.md",
  "main": "./out/extension.js",
  "contributes": {
    "iconThemes": [
      {
        "id": "happyx",
        "label": "HappyX",
        "path": "./icons/hpx_icons.json"
      }
    ],
    "languages": [
      {
        "id": "nim",
        "extensions": [
          ".nim",
          ".nims"
        ],
        "configuration": "./configurations/nim-configuration.json"
      },
      {
        "id": "nimble",
        "aliases": [
          "Nimble",
          "nimble"
        ],
        "extensions": [
          ".nimble",
          ".nim.cfg"
        ],
        "filenames": [
          "nim.cfg"
        ],
        "configuration": "./configurations/nimble-configuration.json"
      },
      {
        "id": "hpx",
        "aliases": [
          "Hpx"
        ],
        "extensions": [
          ".hpx"
        ],
        "configuration": "./configurations/hpx-configuration.json"
      },
      {
        "id": "nimja",
        "aliases": [
          "Nimja",
          "nimja"
        ],
        "extensions": [
          ".nimja"
        ],
        "configuration": "./configurations/nimja-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "nim",
        "scopeName": "source.nim",
        "path": "./syntaxes/nim.tmLanguage.json"
      },
      {
        "language": "nimble",
        "scopeName": "source.nimble",
        "path": "./syntaxes/nimble.tmLanguage.json"
      },
      {
        "language": "nimja",
        "scopeName": "source.nimja",
        "path": "./syntaxes/nimja.tmLanguage.json"
      },
      {
        "language": "hpx",
        "scopeName": "source.hpx",
        "path": "./syntaxes/hpx.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "nim",
        "path": "./snippets/snippets.json"
      }
    ],
    "commands": [
      {
        "command": "nim.run.file",
        "title": "Run selected Nim file",
        "category": "Nim"
      },
      {
        "command": "nim.check",
        "title": "Check Nim project",
        "category": "Nim"
      },
      {
        "command": "nim.execSelectionInTerminal",
        "title": "Run Selection/Line in Nim Terminal",
        "category": "Nim"
      },
      {
        "command": "nim.clearCaches",
        "title": "Clear internal caches",
        "category": "Nim"
      },
      {
        "command": "nim.listCandidateProjects",
        "title": "List candidate nim projects",
        "category": "Nim"
      },
      {
        "command": "nim.restartNimsuggest",
        "title": "Restarts nimsuggest",
        "category": "Nim"
      }
    ],
    "problemMatchers": [
      {
        "name": "nim",
        "owner": "nim",
        "fileLocation": "absolute",
        "severity": "error",
        "pattern": {
          "regexp": "(?!^(\\.+|Hint|\\s+$))(>+ )?(.*)\\((\\d+),\\s(\\d+)\\)\\s+((Error|Warning|Hint):\\s(.*)|(template/generic instantiation from here.*))(\\s\\[.*\\])?",
          "file": 3,
          "line": 4,
          "column": 5,
          "severity": 7,
          "message": 8
        }
      },
      {
        "name": "nim test",
        "owner": "nim",
        "fileLocation": "absolute",
        "pattern": [
          {
            "regexp": "  \\[(OK|FAILED|SKIPPED)\\] (.*)",
            "severity": 1,
            "code": 2
          },
          {
            "regexp": "    (.*)\\((\\d+), (\\d+)\\): (.*)",
            "file": 1,
            "line": 2,
            "column": 3,
            "message": 4,
            "loop": true
          }
        ]
      }
    ],
    "commands": [
      {
        "command": "nim.run.file",
        "title": "Run selected Nim file",
        "category": "Nim"
      },
      {
        "command": "nim.check",
        "title": "Check Nim project",
        "category": "Nim"
      },
      {
        "command": "nim.execSelectionInTerminal",
        "title": "Run Selection/Line in Nim Terminal",
        "category": "Nim"
      },
      {
        "command": "nim.clearCaches",
        "title": "Clear internal caches",
        "category": "Nim"
      },
      {
        "command": "nim.listCandidateProjects",
        "title": "List candidate nim projects",
        "category": "Nim"
      },
      {
        "command": "nim.restartNimsuggest",
        "title": "Restarts nimsuggest",
        "category": "Nim"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "editorLangId == 'nim'",
          "command": "nim.run.file",
          "group": "run@1"
        }
      ]
    },
    "keybindings": [
      {
        "key": "F6",
        "command": "nim.run.file",
        "when": "editorLangId == 'nim'"
      },
      {
        "key": "ctrl+alt+b",
        "command": "nim.check",
        "when": "editorLangId == 'nim'"
      },
      {
        "key": "shift+enter",
        "command": "nim.execSelectionInTerminal",
        "when": "editorFocus && editorLangId == nim && !findInputFocussed && !replaceInputFocussed"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Nim configuration",
      "properties": {
        "nim.project": {
          "type": "array",
          "default": [],
          "description": "Nim project file, if empty use current selected.",
          "scope": "resource"
        },
        "nim.projectMapping": {
          "type": "array",
          "default": [],
          "description": "For non project mode list of per file project mapping using regex, for example ```{\"fileRegex\": \"(.*).inim\", \"projectFile\": \"$1.nim\"}```",
          "properties": {
            "fileRegex": {
              "type": "string",
              "description": "Source file regex"
            },
            "projectFile": {
              "type": "string",
              "description": "Project file path"
            }
          },
          "scope": "resource"
        },
        "nim.test-project": {
          "type": "string",
          "default": "",
          "description": "Optional test project.",
          "scope": "resource"
        },
        "nim.buildOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Execute build task from tasks.json file on save.",
          "scope": "resource"
        },
        "nim.buildCommand": {
          "type": "string",
          "default": "c",
          "description": "Nim build command (c, cpp, doc, etc)",
          "scope": "resource"
        },
        "nim.runOutputDirectory": {
          "type": "string",
          "default": "",
          "description": "Output directory for run selected file command. The directory is relative to the workspace root.",
          "scope": "resource"
        },
        "nim.lintOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Check code by using 'nim check' on save.",
          "scope": "resource"
        },
        "nim.enableNimsuggest": {
          "type": "boolean",
          "default": true,
          "description": "Enable calling nimsuggest process to provide completion suggestions, hover suggestions, etc.\nThis option requires restart to take effect.",
          "scope": "resource"
        },
        "nim.provider": {
          "type": "string",
          "default": "nimsuggest",
          "description": "The backend to use for language features.",
          "enum": [
            "nimsuggest",
            "lsp",
            "none"
          ],
          "scope": "resource"
        },
        "nim.useNimsuggestCheck": {
          "type": "boolean",
          "default": false,
          "description": "Use nimsuggest in order to run check, instead of the nim compiler.",
          "scope": "resource"
        },
        "nim.logNimsuggest": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose logging of nimsuggest to use profile directory."
        },
        "nim.licenseString": {
          "type": "string",
          "default": "",
          "description": "Optional license text that will be inserted on nim file creation.",
          "scope": "resource"
        },
        "nim.nimsuggestRestartTimeout": {
          "type": "integer",
          "default": 60,
          "description": "Nimsuggest will be restarted after this timeout in minutes, if 0 then restart disabled.\nThis option requires restart to take effect."
        },
        "nim.nimprettyIndent": {
          "type": "integer",
          "default": 0,
          "description": "Nimpretty: set the number of spaces that is used for indentation\n--indent:0 means autodetection (default behaviour).",
          "scope": "resource"
        },
        "nim.nimprettyMaxLineLen": {
          "type": "integer",
          "default": 80,
          "description": "Nimpretty: set the desired maximum line length (default: 80).",
          "scope": "resource"
        },
        "nimlangserver.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Nim language server."
        },
        "nim.lsp.path":{
          "type": "string",
          "default": "",
          "description": "Path to the Nim language server executable. If empty, the extension will try to find the language server in the PATH environment variable.",
          "scope": "resource"
        },
        "nim.inlayHints.typeHints.enable": {
          "type": "boolean",
          "default": "true",
          "description": "Enable inlay type hints."
        }
      }
    },
    "scripts": {
      "vscode:prepublish": "nimble release"
    }
  },
  "devDependencies": {
    "@types/mocha": "^5.2.7",
    "@types/node": "^8.10.25",
    "@types/vscode": "^1.51.0",
    "tslint": "^5.16.0",
    "typescript": "^3.4.5",
    "js-yaml": "^4.1.0",
    "npm-check-updates": "^13.0.0",
    "ovsx": "^0.2.1",
    "vsce": "^1.95.0",
    "vscode-test": "^1.4.0"
  },
  "dependencies": {
    "vscode-languageclient": "^8.1.0"
  }
}
