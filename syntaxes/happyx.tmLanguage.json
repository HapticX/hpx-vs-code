{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "HappyX",
	"patterns": [
		{"include": "#nimConstatns"},
		{"include": "#pathParams"},
		{"include": "#keywords"},
		{"include": "#comments"},
		{"include": "#pragmas"},
		{"include": "#stringBlocks"},
		{"include": "#functions"},
		{"include": "#operators"}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.happyx",
					"match": "\\b(if|elif|else|case|of|while|for|return|asm|yield|when|interface|bind|using|break|continue|discard|static|block|do|defer|try|finally|raise|func|proc|method|iterator|type|template|macro|converter|cast|as|except|import|export|include|from|var|let|const)\\b"
				},
				{
					"name": "keyword.control.happyx",
					"match": "\\bnew\\b(?=[ \t]+[\\S])"
				},
				{
					"name": "keyword.types.happyx",
					"match": "\\b(object|enum|untyped|typed|string|char|auto|any|tuple|seq|set|ref|ptr|pointer|sink|array|open[aA]rray|int\\d{0,2}|float\\d{0,2}|uint\\d{0,2})\\b"
				},
				{
					"name": "keyword.builtin.happyx",
					"match": "\\b(echo|defined|declared|declaredInScope|shl|shr|div|mod|xor|notin|in|out|await|waitFor|asyncCheck)\\b"
				},
				{
					"name": "keyword.macros.happyx",
					"match": "\\b(model|serve|appRoutes|component|mount|regCORS|pathParams|remember)\\b"
				},
				{
					"name": "keyword.components.happyx",
					"match": "`\\b(script|style)\\b`\\s+as\\s+\\b(css|js)\\b"
				},
				{
					"name": "keyword.components.happyx",
					"match": "`\\b(template|script|style)\\b`"
				},
				{
					"name": "keyword.httpMethods.happyx",
					"match": "^[ \t]+\\b(get|post|put|link|delete|patch|options|ws)\\b(?=\\s+\")"
				},
				{
					"name": "keyword.httpMethods.happyx",
					"match": "^[ \t]+\\b(wsConnect|wsError|wsMismatchProtocol|wsClosed|notfound|middleware)\\b"
				},
				{
					"name": "constant.language.happyx",
					"match": "^[ \t]+\\b(true|false|on|off|disable|enable|nil)\\b"
				}
			]
		},
		"stringBlocks": {
			"patterns": [
				{"include": "#asmCode"},
				{"include": "#strings"},
				{"include": "#regexString"}
			]
		},
		"regexString": {
			"name": "string.regex.happyx",
			"begin": "(?<=re)\"",
			"end": "\""
		},
		"strings": {
			"name": "string.quoted.double.happyx",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.happyx",
					"match": "\\\\."
				}
			]
		},
		"pathParams": {
			"name": "string.quoted.double.happyx",
			"begin": "(?<=^\\s+\\b(get|post|put|link|delete|patch|options|ws)\\b\\s+)\"",
			"end": "\"",
			"patterns": [
				{
					"name": "entity.name.class.happyx",
					"match": "(?<=\\{[a-zA-Z][a-zA-Z0-9_]*(:[a-zA-Z][a-zA-Z0-9_]*)?\\[)m(?=\\])"
				},
				{
					"name": "entity.name.class.happyx",
					"match": "(?<=\\$[a-zA-Z][a-zA-Z0-9_]*(:[a-zA-Z][a-zA-Z0-9_]*)?\\[)m(?=\\])"
				},
				{
					"name": "entity.name.class.happyx",
					"match": "(?<=\\$[a-zA-Z][a-zA-Z0-9_]*:)[a-zA-Z][a-zA-Z0-9_]*"
				},
				{
					"name": "entity.name.class.happyx",
					"match": "(?<=\\{[a-zA-Z][a-zA-Z0-9_]*:)[a-zA-Z][a-zA-Z0-9_]*"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\$[a-zA-Z][a-zA-Z0-9_]*"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "(?<=\\{)[a-zA-Z][a-zA-Z0-9_]*"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "<[a-zA-Z][a-zA-Z0-9_]*>"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\[[a-zA-Z][a-zA-Z0-9_]*:[a-zA-Z][a-zA-Z0-9_]*\\]"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.happyx",
					"match": "([\\+=\\-\\?<>!@~\\$%\\^&\\*:â„–/\\\\\\.]+)"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.class.happyx",
					"match": "\\b[A-Z][A-Za-z0-9_]*\\b"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s+(?=[\\w\\d]+)"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "(?<=\\([\\s+\\S]+?\\))\\s*\\b([a-zA-Z_][a-zA-Z0-9_]*)"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\")"
				}
			]
		},
		"commentSingleLineDoc": {
			"name": "comment.line.number-sign.happyx",
			"begin": "##(?!\\[)",
			"end": "$",
			"patterns": [
				{"include": "text.html.markdown"}
			]
		},
		"commentMultilineDoc": {
			"name": "comment.block.happyx",
			"begin": "##\\[",
			"end": "\\]##",
			"patterns": [
				{"include": "text.html.markdown"}
			]
		},
		"comments": {
			"patterns": [
				{"include": "#commentSingleLineDoc"},
				{"include": "#commentMultilineDoc"},
				{
					"name": "comment.block.happyx",
					"begin": "#\\[",
					"end": "\\]#(?!#)"
				},
				{
					"name": "comment.line.number-sign.happyx",
					"match": "#[^#].*$"
				}
			]
		},
		"asmCode": {
			"name": "string.quoted.double.asm.happyx",
			"begin": "(?<=asm\\s+)\"\"\"",
			"end": "\"\"\"",
			"patterns": [{"include": "source.asm"}]
		},
		"emitDefault": {
			"name": "constant.happyx",
			"begin": "(?<=\\s*\\bemit\\b\\s*:\\s*)\"{1,3}(?!\\s*\\/\\/\\s*(c|js|javascript|cpp|c\\+\\+|objc))",
			"end": "\"{1,3}",
			"patterns": [{"include": "source.cpp"}]
		},
		"emitC": {
			"name": "constant.happyx",
			"begin": "(?<=\\s*\\bemit\\b\\s*:\\s*)\"\"\"\\s*\\/\\/\\s*c",
			"end": "\"\"\"",
			"patterns": [{"include": "source.c"}]
		},
		"emitCpp": {
			"name": "constant.happyx",
			"begin": "(?<=\\s*\\bemit\\b\\s*:\\s*)\"\"\"\\s*\\/\\/\\s*(cpp|c\\+\\+)",
			"end": "\"\"\"",
			"patterns": [{"include": "source.cpp"}]
		},
		"emitObjC": {
			"name": "constant.happyx",
			"begin": "(?<=\\s*\\bemit\\b\\s*:\\s*)\"\"\"\\s*\\/\\/\\s*objc",
			"end": "\"\"\"",
			"patterns": [{"include": "source.objc"}]
		},
		"emitJs": {
			"name": "constant.happyx",
			"begin": "(?<=\\s*\\bemit\\b\\s*:\\s*)\"\"\"\\s*\\/\\/\\s*(js|javascript)",
			"end": "\"\"\"",
			"patterns": [{"include": "source.js"}]
		},
		"codeGenPragma": {
			"name": "string.quoted.double.happyx",
			"begin": "(?<=\\s*\\bcodegenDecl\\b\\s*:\\s*)\"",
			"end": "\"",
			"patterns": [
				{
					"name": "entity.name.class.happyx",
					"match": "\\$#"
				}
			]
		},
		"passPragma": {
			"name": "string.quoted.double.happyx",
			"begin": "(?<=\\s*\\b(pass|passc|passl|localPassc)\\b\\s*:\\s*)\"",
			"end": "\"",
			"patterns": [{"include": "meta.statement.command.shell"}]
		},
		"pragmas": {
			"name": "entity.other.happyx",
			"begin": "\\{\\.",
			"end": "\\.\\}",
			"patterns": [
				{
					"name": "entity.name.function.happyx",
					"match": "\\b(async|multisync|pragma|gcsafe|inline|noSideEffect|push|pop)\\b"
				},
				{"include": "#emitCpp"},
				{"include": "#emitC"},
				{"include": "#emitJs"},
				{"include": "#emitDefault"},
				{"include": "#codeGenPragma"},
				{"include": "#passPragma"},
				{"include": "#strings"},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b(emit|pass[lc]?|codegenDecl|nodecl|cdecl|compileTime|noReturn|acyclic|final|shallow|pure|line|linearScanEnd)\\b"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b(computedGoto|checks|optimization|boundChecks|overflowChecks|nilChecks|assertions|hints|patterns|callconv)\\b"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b(register|global|used|experimental|bitsize|align|volatile|header|incompleteStruct|compile|link|localPassc|importcpp|importc|importjs|importobjc)\\b"
				},
				{
					"name": "entity.name.function.happyx",
					"match": "\\b(cppNonPod|intdefine|strdefine|booldefine|exportc|extern|bycopy|varargs|union|packed|dynlib|threadvar|noInit|requiresInit|borrow)\\b"
				},
				{
					"name": "markup.bold.happyx",
					"match": "\\b(warning|error|deprecated|fatal)\\b"
				}
			]
		},
		"nimConstatns": {
			"name": "markup.heading",
			"match": "\\b(appType|CompileDate|CompileTime|cpuEndian|hostCPU|hostOS|Inf|isMainModule|NaN|NegInf|NimMajor|NimMinor|NimPatch|NimVersion|QuitSuccess|QuitFailure)\\b"
		}
	},
	"scopeName": "source.nim"
}